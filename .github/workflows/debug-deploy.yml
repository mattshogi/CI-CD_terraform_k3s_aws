name: Debug Deploy Test

on:
  workflow_dispatch:
    inputs:
      instance_type:
        description: EC2 instance type
        required: false
        default: t3.micro

concurrency:
  group: debug-deploy
  cancel-in-progress: false

env:
  TF_IN_AUTOMATION: 1
  AWS_REGION: us-east-1
  TERRAFORM_CLI_ARGS: -no-color

jobs:
  debug-deploy:
    name: Debug Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: infra
        run: |
          terraform plan \
            -var="ssh_key_name=${{ secrets.AWS_SSH_KEY_NAME }}" \
            -var="instance_type=${{ github.event.inputs.instance_type }}" \
            -var="k3s_node_count=0" \
            -var="environment=debug-test" \
            -var="enable_monitoring=false" \
            -var="install_docker=false" \
            -var="resource_name_suffix=${{ github.run_id }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        run: |
          terraform apply -auto-approve tfplan
          echo "Apply completed successfully"

      - name: Get Outputs
        working-directory: infra
        run: |
          echo "=== Terraform Output ==="
          terraform output
          echo "=== Terraform Output JSON ==="
          terraform output -json
          echo "=== End Outputs ==="

      - name: Test Basic Connectivity
        working-directory: infra
        run: |
          SERVER_IP=$(terraform output -raw server_public_ip)
          INSTANCE_ID=$(terraform output -raw server_instance_id)
          echo "Server IP: $SERVER_IP"
          echo "Instance ID: $INSTANCE_ID"
          
          echo "Testing basic HTTP connectivity..."
          for i in {1..10}; do
            echo "Attempt $i..."
            if curl -s --max-time 10 "http://$SERVER_IP/" | head -20; then
              echo "SUCCESS: Got response from server!"
              break
            else
              echo "No response yet, waiting..."
              sleep 10
            fi
          done

      - name: Cleanup
        if: always()
        working-directory: infra
        run: terraform destroy -auto-approve
